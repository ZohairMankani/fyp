# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yqNSgo5yGVh9LwVZIhEZhD0KqIcfgcfE
"""

from llama_index.llms.groq import Groq
from llama_index.embeddings.huggingface import HuggingFaceEmbedding
from llama_index.core.llms import ChatMessage
from llama_index.core import Settings
from transformers import pipeline
import spacy

# Load spaCy model and Hugging Face classifier
nlp = spacy.load("en_core_web_sm")
classifier = pipeline("zero-shot-classification", model="facebook/bart-large-mnli")
labels = ["harmful", "health benefits", "general ingredient question"]

# Initialize LLaMA-based chatbot
llm = Groq(model="llama3-8b-8192")
embed_model = HuggingFaceEmbedding(model_name="BAAI/bge-small-en-v1.5")
Settings.llm = llm
Settings.embed_model = embed_model

def continuous_chat_with_basic_chatbot(extracted_text):
    while True:
        user_question = input("You: ")
        if user_question.lower() in ["exit", "quit", "main"]:
            return "Chat ended."
        response = classify_user_query(user_question)
        print("\nIngredients Assistant:", response)

def continuous_chat_with_llama(extracted_text):
    messages = [ChatMessage(role="system", content="AI Assistant.")]
    chat_response = llm.chat(messages)
    print("\nShopping Assistant Response:", chat_response)

    while True:
        user_question = input("You: ")
        if user_question.lower() in ["exit", "quit", "main"]:
            return "Chat ended."
        messages.append(ChatMessage(role="user", content=user_question))
        chat_response = llm.chat(messages)
        print("\nShopping:", chat_response)

def classify_user_query(user_question):
    doc = nlp(user_question)
    result = classifier(user_question, candidate_labels=labels)
    classification = result["labels"][0]
    if classification == "harmful":
        return handle_harmful_question()
    elif classification == "health benefits":
        return handle_health_benefits_question()
    return "General question."

def handle_harmful_question():
    return "Checking if the ingredient is harmful..."

def handle_health_benefits_question():
    return "Here are the health benefits..."